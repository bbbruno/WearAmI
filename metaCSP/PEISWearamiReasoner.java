package org.metacsp;

import java.util.Calendar;
import java.util.logging.Level;

import org.metacsp.meta.simplePlanner.ProactivePlanningDomain;
import org.metacsp.meta.simplePlanner.SimpleDomain;
import org.metacsp.meta.simplePlanner.SimplePlanner;
import org.metacsp.meta.simplePlanner.SimplePlannerInferenceCallback;
import org.metacsp.multi.activity.ActivityNetworkSolver;
import org.metacsp.sensing.ConstraintNetworkAnimator;
import org.metacsp.sensing.Sensor;
import org.metacsp.time.Bounds;
import org.metacsp.utility.logging.MetaCSPLogging;
import org.metacsp.utility.timelinePlotting.TimelinePublisher;
import org.metacsp.utility.timelinePlotting.TimelineVisualizer;

import core.CallbackObject;
import core.PeisJavaMT;
import core.PeisTuple;
import core.WrongPeisKernelVersionException;

public class PEISWearamiReasoner {

	public static void main(String[] args) {
		
		// Create and initialize PEIS component
		try {
			PeisJavaMT.peisjava_initialize(args);
		}
		catch (WrongPeisKernelVersionException e) {
			e.printStackTrace();
			System.exit(1);
		}
		System.out.println("PEISWearamiReasoner ID: " + PeisJavaMT.peisjava_peisid());
	
		// Create planner
		long origin = Calendar.getInstance().getTimeInMillis();
		SimplePlanner planner = new SimplePlanner(origin,origin+100000,0);
		MetaCSPLogging.setLevel(planner.getClass(), Level.FINE);
				
		// Load domain
		// testPEIS.ddl           --> dummy domain to test the integration with PEIS
		// wearamiAngen_ROMAN.ddl --> reduced domain for the 3 scenarios described in the RO-MAN15 article
		// wearamiAngen.ddl       --> full domain for in-home ADL recognition @ Angen		
		String domain = "domains/testPEIS.ddl";
		SimpleDomain.parseDomain(planner, domain, ProactivePlanningDomain.class);
			    
		ActivityNetworkSolver ans = (ActivityNetworkSolver)planner.getConstraintSolvers()[0];
		SimplePlannerInferenceCallback cb = new SimplePlannerInferenceCallback(planner);
		ConstraintNetworkAnimator animator = new ConstraintNetworkAnimator(ans, 1000, cb);

		// Create input sensors
		
		// 1. testPEIS sensor set
		String[] sensorNames = {"Chair", "Armchair"};
		
		// 2. wearamiAngen_ROMAN sensor set
		//String[] sensorNames = {"Location", "Gesture", "Posture", "Chair", "Armchair", "Glass", "Bottle"};
		
		// 3. TODO: wearamiAngen full sensor set
		
		int numSensors = sensorNames.length;
		final Sensor[] sensorArray = {};
		for(int i=1; i<numSensors; i++){
			sensorArray[i] = new Sensor(sensorNames[i], animator);
		}
		
		// Subscribe to PEIStuples generated by the real sensors
		int[] ownerArray = {};
		PeisTuple[] tupleArray = {};
		for(int i=1; i<numSensors; i++){
			PeisJavaMT.peisjava_subscribe(-1, sensorNames[i]);
			ownerArray[i] = PeisJavaMT.peisjava_findOwner(sensorNames[i]);
			tupleArray[i] = PeisJavaMT.peisjava_getTuple(ownerArray[i], sensorNames[i]);
		}
		
		// Connect sensors to sources - PEIStuples
		for(int i=1; i<numSensors; i++){
			PeisJavaMT.peisjava_registerTupleCallback(
				tupleArray[i].owner,
				tupleArray[i].getKey(),
				new CallbackObject() {
					@Override
					public void callback(PeisTuple tuple) {
						if (tuple.getStringData() != null) {
							sensorArray[i].postSensorValue(tuple.getStringData(), Calendar.getInstance().getTimeInMillis());
						}
					}
				}
			);
		}

		// Create timeline visualizer
		// TimelinePublisher tp = new TimelinePublisher(ans.getConstraintNetwork(), new Bounds(0,60000), true, "Time", "Human", "Chair", "Armchair");
		// TimelineVisualizer tv = new TimelineVisualizer(tp);
		// tv.startAutomaticUpdate(1000);
	}
}