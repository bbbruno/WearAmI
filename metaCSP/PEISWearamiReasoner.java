package org.metacsp;

import java.util.Calendar;
import java.util.logging.Level;

import org.metacsp.meta.simplePlanner.ProactivePlanningDomain;
import org.metacsp.meta.simplePlanner.SimpleDomain;
import org.metacsp.meta.simplePlanner.SimplePlanner;
import org.metacsp.meta.simplePlanner.SimplePlannerInferenceCallback;
import org.metacsp.multi.activity.ActivityNetworkSolver;
import org.metacsp.sensing.ConstraintNetworkAnimator;
import org.metacsp.sensing.Sensor;
import org.metacsp.time.Bounds;
import org.metacsp.utility.logging.MetaCSPLogging;
import org.metacsp.utility.timelinePlotting.TimelinePublisher;
import org.metacsp.utility.timelinePlotting.TimelineVisualizer;

import core.CallbackObject;
import core.PeisJavaMT;
import core.PeisTuple;
import core.WrongPeisKernelVersionException;

public class PEISWearamiReasoner {

	public static void main(String[] args) {
		
		// Create and initialize PEIS component
		try {
			PeisJavaMT.peisjava_initialize(args);
		}
		catch (WrongPeisKernelVersionException e) {
			e.printStackTrace();
			System.exit(1);
		}
		System.out.println("PEISWearamiReasoner ID: " + PeisJavaMT.peisjava_peisid());
	
		// Create planner
		long origin = Calendar.getInstance().getTimeInMillis();
		SimplePlanner planner = new SimplePlanner(origin,origin+100000,0);
		MetaCSPLogging.setLevel(planner.getClass(), Level.FINE);
				
		// Load domain
		// test[sensor_name].ddl  --> dummy domains to test the integration with PEIS
		// wearamiAngen_ROMAN.ddl --> reduced domain for the 3 scenarios described in the RO-MAN15 article
		// wearamiAngen.ddl       --> full domain for in-home ADL recognition @ Angen		
		String domain = "domains/testLocationPosture.ddl";
		SimpleDomain.parseDomain(planner, domain, ProactivePlanningDomain.class);
			    
		ActivityNetworkSolver ans = (ActivityNetworkSolver)planner.getConstraintSolvers()[0];
		SimplePlannerInferenceCallback cb = new SimplePlannerInferenceCallback(planner);
		ConstraintNetworkAnimator animator = new ConstraintNetworkAnimator(ans, 1000, cb);

		// Create input sensors
		/* debug mode */
		// testLocation sensor set
		// String name = "Location";
		// testPosture sensor set
		final Sensor sensorLocation = new Sensor("Location", animator);
		final Sensor sensorPosture = new Sensor("Posture", animator);
		final Sensor sensorFallEvent = new Sensor("FallEvent", animator);
				
		// TODO: wearamiAngen_ROMAN sensor set
		//String[] sensorNames = {"Location", "Gesture", "Posture", "Chair", "Armchair", "Glass", "Bottle"};
				
		// TODO: wearamiAngen full sensor set
		
		// Subscribe to PEIStuples generated by the real sensors
		PeisJavaMT.peisjava_subscribe(-1, "Location");
		int ownerLocation = PeisJavaMT.peisjava_findOwner("Location");
		PeisTuple tupleLocation = PeisJavaMT.peisjava_getTuple(ownerLocation, "Location");
		
		PeisJavaMT.peisjava_subscribe(-1, "Belt.posture");
		int ownerPosture = PeisJavaMT.peisjava_findOwner("Belt.posture");
		PeisTuple tuplePosture = PeisJavaMT.peisjava_getTuple(ownerPosture, "Belt.posture");
		
		PeisJavaMT.peisjava_subscribe(-1, "Safety.fall.event");
		int ownerFallEvent = PeisJavaMT.peisjava_findOwner("Safety.fall.event");
		PeisTuple tupleFallEvent = PeisJavaMT.peisjava_getTuple(ownerFallEvent, "Safety.fall.event");
		
		// Connect sensors to sources - PEIStuples
		PeisJavaMT.peisjava_registerTupleCallback(
			tupleLocation.owner,
			tupleLocation.getKey(),
			new CallbackObject() {
				@Override
				public void callback(PeisTuple tuple) {
					if (tuple.getStringData() != null) {
						sensorLocation.postSensorValue(tuple.getStringData(), Calendar.getInstance().getTimeInMillis());
					}
				}
			}
		);
		
		PeisJavaMT.peisjava_registerTupleCallback(
			tuplePosture.owner,
			tuplePosture.getKey(),
			new CallbackObject() {
				@Override
				public void callback(PeisTuple tuple) {
					if (tuple.getStringData() != null) {
						sensorPosture.postSensorValue(tuple.getStringData(), Calendar.getInstance().getTimeInMillis());
					}
				}
			}
		);
		
		PeisJavaMT.peisjava_registerTupleCallback(
			tupleFallEvent.owner,
			tupleFallEvent.getKey(),
			new CallbackObject() {
				@Override
				public void callback(PeisTuple tuple) {
					if (tuple.getStringData() != null) {
						sensorFallEvent.postSensorValue(tuple.getStringData(), Calendar.getInstance().getTimeInMillis());
					}
				}
			}
		);

		// Create timeline visualizer
		TimelinePublisher tp = new TimelinePublisher(ans.getConstraintNetwork(), new Bounds(0,60000), true, "Time", "Human", "Location", "Posture", "FallEvent");
		TimelineVisualizer tv = new TimelineVisualizer(tp);
		tv.startAutomaticUpdate(1000);
	}
}